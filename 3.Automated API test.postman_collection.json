{
	"info": {
		"_postman_id": "4f629875-df29-4fc9-9579-71de8afc1714",
		"name": "3.Automated API test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32338972",
		"_collection_link": "https://crimson-comet-509853.postman.co/workspace/API-Automation-Testing~9214d566-8402-4141-9cab-0caed62df8ec/collection/32338972-4f629875-df29-4fc9-9579-71de8afc1714?action=share&source=collection_link&creator=32338972"
	},
	"item": [
		{
			"name": "Read Operations",
			"item": [
				{
					"name": "Get all users by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body should be JSON\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.eql(1);\r",
									"    pm.expect(jsonData.per_page).to.eql(6);\r",
									"    pm.expect(jsonData.total_pages).to.eql(2);\r",
									"    pm.expect(jsonData.data).to.not.null;\r",
									"});\r",
									"\r",
									" pm.test(\"Response time is less than 1000ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/users/?page={{PAGEC}}&size={{SIZEC}}&sort=scs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "{{PAGEC}}"
								},
								{
									"key": "size",
									"value": "{{SIZEC}}"
								},
								{
									"key": "sort",
									"value": "scs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.data.id).to.eql(2);\r",
									"\r",
									"});\r",
									"pm.test(\"Response should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"      pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"      pm.expect(jsonData.data).to.have.property(\"first_name\");\r",
									"      pm.expect(jsonData.data).to.have.property(\"last_name\");\r",
									"      pm.expect(jsonData.data).to.have.property(\"avatar\");\r",
									"      \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should be json and not null and not undefined properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     pm.expect(jsonData.data.id).to.not.be.null;\r",
									"      pm.expect(jsonData.data.id).to.not.be.undefined;\r",
									"\r",
									"      pm.expect(jsonData.data.email).to.not.be.null;\r",
									"      pm.expect(jsonData.data.email).to.not.be.undefined;\r",
									"\r",
									"       pm.expect(jsonData.data.first_name).to.not.be.null;\r",
									"      pm.expect(jsonData.data.first_name).to.not.be.undefined;\r",
									"\r",
									"      pm.expect(jsonData.data.last_name).to.not.be.null;\r",
									"      pm.expect(jsonData.data.last_name).to.not.be.undefined;\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"userId\",\"hfrh9f493r39hh2344\");",
							"pm.collectionVariables.set(\"username\",\"steve smith\");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Validate Collections variable\", function () {",
							"    var userId=pm.collectionVariables.get(\"userId\");",
							"    var username=pm.collectionVariables.get(\"username\");",
							"   ",
							"    console.log(userId,username);",
							"    ",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Write Operations",
			"item": [
				{
					"name": "Delete a user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204: Delete has no content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
									"     pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
									"\r",
									"});\r",
									"pm.test(\"Response should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData).to.have.property(\"name\");\r",
									"      pm.expect(jsonData).to.have.property(\"job\");\r",
									"      \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should be json and not null and not undefined properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     pm.expect(jsonData.name).to.not.be.null;\r",
									"      pm.expect(jsonData.name).to.not.be.undefined;\r",
									"\r",
									"      pm.expect(jsonData.job).to.not.be.null;\r",
									"      pm.expect(jsonData.job).to.not.be.undefined;\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json \", function () {\r",
									"   pm.expect( pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/2",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response should be a json with valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.name).to.eql(\"smith-morphous\");\r",
									"      pm.expect(jsonData.job).to.eql(\"Matrix Leader\");\r",
									"\r",
									"});\r",
									"pm.test(\"Response should be a json and dynamic\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData).to.have.property(\"id\");\r",
									"      pm.expect(jsonData).to.have.property(\"createdAt\");\r",
									"\r",
									"      pm.expect(jsonData.id).to.not.be.null;\r",
									"      pm.expect(jsonData.id).to.not.be.undefined;\r",
									"\r",
									"      pm.expect(jsonData.createdAt).to.not.be.null;\r",
									"      pm.expect(jsonData.createdAt).to.not.be.undefined;\r",
									"\r",
									"      \r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"smith-morphous\",\r\n    \"job\": \"Matrix Leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/users/3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Validate Collections variable\", function () {",
					"    var host_url=pm.collectionVariables.get(\"URL\");",
					"    var page=pm.collectionVariables.get(\"PAGEC\");",
					"    var size=pm.collectionVariables.get(\"SIZEC\");",
					"    console.log(host_url,page,size);",
					"    ",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "PAGEC",
			"value": "0",
			"type": "string"
		},
		{
			"key": "SIZEC",
			"value": "10",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		}
	]
}